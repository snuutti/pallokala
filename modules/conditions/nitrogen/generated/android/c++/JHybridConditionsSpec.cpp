///
/// JHybridConditionsSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridConditionsSpec.hpp"



#include <string>
#include <variant>
#include <unordered_map>
#include "JVariableType.hpp"

namespace margelo::nitro::NitroConditions {

  jni::local_ref<JHybridConditionsSpec::jhybriddata> JHybridConditionsSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridConditionsSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridConditionsSpec::initHybrid),
    });
  }

  size_t JHybridConditionsSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridConditionsSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  bool JHybridConditionsSpec::resolve(const std::string& script, const std::unordered_map<std::string, std::variant<std::string, double, bool>>& data) {
    static const auto method = javaClassStatic()->getMethod<jboolean(jni::alias_ref<jni::JString> /* script */, jni::alias_ref<jni::JMap<jni::JString, JVariableType>> /* data */)>("resolve");
    auto __result = method(_javaPart, jni::make_jstring(script), [&]() -> jni::local_ref<jni::JMap<jni::JString, JVariableType>> {
      auto __map = jni::JHashMap<jni::JString, JVariableType>::create(data.size());
      for (const auto& __entry : data) {
        __map->put(jni::make_jstring(__entry.first), JVariableType::fromCpp(__entry.second));
      }
      return __map;
    }());
    return static_cast<bool>(__result);
  }

} // namespace margelo::nitro::NitroConditions
