///
/// JVariableType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include <variant>

#include <variant>
#include <string>

namespace margelo::nitro::NitroConditions {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ std::variant and the Java class "VariableType".
   */
  class JVariableType: public jni::JavaClass<JVariableType> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/conditions/VariableType;";

    static jni::local_ref<JVariableType> create_0(jni::alias_ref<jni::JString> value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariableType(jni::alias_ref<jni::JString>)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JVariableType> create_1(double value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariableType(double)>("create");
      return method(javaClassStatic(), value);
    }
    static jni::local_ref<JVariableType> create_2(jboolean value) {
      static const auto method = javaClassStatic()->getStaticMethod<JVariableType(jboolean)>("create");
      return method(javaClassStatic(), value);
    }

    static jni::local_ref<JVariableType> fromCpp(const std::variant<std::string, double, bool>& variant) {
      switch (variant.index()) {
        case 0: return create_0(jni::make_jstring(std::get<0>(variant)));
        case 1: return create_1(std::get<1>(variant));
        case 2: return create_2(std::get<2>(variant));
        default: throw std::invalid_argument("Variant holds unknown index! (" + std::to_string(variant.index()) + ")");
      }
    }

    [[nodiscard]] std::variant<std::string, double, bool> toCpp() const;
  };

  namespace JVariableType_impl {
    class First: public jni::JavaClass<First, JVariableType> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/conditions/VariableType$First;";
    
      [[nodiscard]] jni::local_ref<jni::JString> getValue() const {
        static const auto field = javaClassStatic()->getField<jni::JString>("value");
        return getFieldValue(field);
      }
    };
    
    class Second: public jni::JavaClass<Second, JVariableType> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/conditions/VariableType$Second;";
    
      [[nodiscard]] double getValue() const {
        static const auto field = javaClassStatic()->getField<double>("value");
        return getFieldValue(field);
      }
    };
    
    class Third: public jni::JavaClass<Third, JVariableType> {
    public:
      static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/conditions/VariableType$Third;";
    
      [[nodiscard]] jboolean getValue() const {
        static const auto field = javaClassStatic()->getField<jboolean>("value");
        return getFieldValue(field);
      }
    };
  } // namespace JVariableType_impl

  std::variant<std::string, double, bool> JVariableType::toCpp() const {
    if (isInstanceOf(JVariableType_impl::First::javaClassStatic())) {
      auto jniValue = static_cast<const JVariableType_impl::First*>(this)->getValue();
      return jniValue->toStdString();
    } else if (isInstanceOf(JVariableType_impl::Second::javaClassStatic())) {
      auto jniValue = static_cast<const JVariableType_impl::Second*>(this)->getValue();
      return jniValue;
    } else if (isInstanceOf(JVariableType_impl::Third::javaClassStatic())) {
      auto jniValue = static_cast<const JVariableType_impl::Third*>(this)->getValue();
      return static_cast<bool>(jniValue);
    }
    throw std::invalid_argument("Variant is unknown Kotlin instance!");
  }

} // namespace margelo::nitro::NitroConditions
